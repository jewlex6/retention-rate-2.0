import streamlit as st
import pandas as pd

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="Retention / Churn Rate –ê–Ω–∞–ª–∏–∑")
st.title("üìà –ê–Ω–∞–ª–∏–∑ Retention –∏ Churn Rate –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π")

# –í—ã–±–æ—Ä –º–µ—Ç—Ä–∏–∫–∏
metric_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", ["Retention Rate", "Churn Rate"])

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤—ã–≥—Ä—É–∑–∫—É (.xlsx)", type="xlsx")

if uploaded_file:
    # –ß—Ç–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
    df = pd.read_excel(uploaded_file)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
    date_col = next((col for col in df.columns if "date" in col.lower()), None)
    name_col = next((col for col in df.columns if "name" in col.lower()), None)
    session_col = next((col for col in df.columns if "group session" in col.lower()), None)

    if not all([date_col, name_col, session_col]):
        st.error("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã —Å –¥–∞—Ç–æ–π –ø–æ—Å–µ—â–µ–Ω–∏—è (Date), –∏–º–µ–Ω–µ–º –∫–ª–∏–µ–Ω—Ç–∞ (Name) –∏ —Ç–∏–ø–æ–º –∑–∞–Ω—è—Ç–∏—è (Group Session).")
    else:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É
        df[date_col] = pd.to_datetime(df[date_col], errors='coerce', dayfirst=True)
        df = df.dropna(subset=[date_col])

        # –¢–æ–ª—å–∫–æ –≥—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è
        group_sessions = ['CROSSFIT', 'CROSSFIT LITE', 'GYM', 'GYMNASTICS', 'THE LONG WOD', 'WEIGHTLIFTING']
        df = df[df[session_col].isin(group_sessions)]

        if df.empty:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥—Ä—É–ø–ø–æ–≤—ã–º –∑–∞–Ω—è—Ç–∏—è–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
        else:
            df['YearMonth'] = df[date_col].dt.to_period('M')

            # –í—ã–±–æ—Ä –¥–∞—Ç
            min_date = df[date_col].min()
            max_date = df[date_col].max()
            start_date = st.date_input("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞", min_value=min_date.date(), value=min_date.date())
            end_date = st.date_input("–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞", min_value=min_date.date(), max_value=max_date.date(), value=max_date.date())

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É
            mask = (df[date_col] >= pd.to_datetime(start_date)) & (df[date_col] <= pd.to_datetime(end_date))
            filtered_df = df.loc[mask]

            if filtered_df.empty:
                st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç.")
            else:
                # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç—É –∏ –º–µ—Å—è—Ü—É
                visits = filtered_df.groupby([name_col, 'YearMonth']).size().reset_index(name='Visits')
                pivot = visits.pivot(index=name_col, columns='YearMonth', values='Visits').fillna(0)
                pivot = pivot.sort_index(axis=1)

                result = {}
                months = list(pivot.columns)

                for i in range(len(months) - 1):
                    this_month = pivot[months[i]] > 0
                    next_month = pivot[months[i+1]] > 0
                    total_clients = this_month.sum()

                    if total_clients == 0:
                        continue

                    if metric_type == "Retention Rate":
                        retained = (this_month & next_month).sum()
                        value = round((retained / total_clients) * 100, 2)
                    else:
                        churned = (this_month & ~next_month).sum()
                        value = round((churned / total_clients) * 100, 2)

                    result[str(months[i])] = value

                result_df = pd.DataFrame(result.items(), columns=["–ú–µ—Å—è—Ü", f"{metric_type} (%)"])

                # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
                if st.checkbox("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É"):
                    result_df = result_df.sort_values(by=result_df.columns[1], ascending=False)

                # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                st.subheader(f"üìä {metric_type} –ø–æ –º–µ—Å—è—Ü–∞–º")
                st.dataframe(result_df)

                # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ CSV",
                    data=result_df.to_csv(index=False).encode('utf-8'),
                    file_name="retention_churn_result.csv",
                    mime="text/csv"
                )
